@using RPedretti.TestGraphQL.Web.Pages.Products.Components
@page "/"
@inject IProductService productService

@if(loading)
{
	<div style="height: 100%; width: 100%; display: flex; align-items: center; justify-content: center;">
		<span>Loading&hellip;</span>
	</div>
}
else
{
	<h3>Products <b>(@products.Count)</b></h3>
	<div style="height: 300px; width: 100%; overflow: hidden auto">
		<table class="table table-fixed">
			<thead>
				<tr>
					<th scope="col" class="col-4">Selected</th>
					<th scope="col" class="col-4">Product</th>
					<th scope="col" class="col-4">Product type</th>
				</tr>
			</thead>
			<tbody>
				<Virtualize Items="@products" Context="product">
					<ProductListItem Product="@product" @key="product.ProductId" />
				</Virtualize>
			</tbody>

		</table>
	</div>
}

@code {
	private bool loading = true;
	private List<Product> products;

	protected override async Task OnInitializedAsync()
	{
		var result = await productService.GetProducts(true);
		products = result.ToList();
		loading = false;
	}
}
